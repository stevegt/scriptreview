#!/usr/bin/python2

import curses
import os
import sys
import time
import traceback

def curses_main():
    # Everything below here is pretty generic, usable for most typical
    # curses apps...
    try:
        # Before doing anything, curses must be initialized.
        # This is done by calling the initscr() function,
        # which will determine the terminal type, send any
        # required setup codes to the terminal, and create
        # various internal data structures. If successful,
        # initscr() returns a window object representing the
        # entire screen; this is usually called stdscr, after
        # the name of the corresponding C variable.
        stdscr = curses.initscr()
        
        # Usually curses applications turn off automatic
        # echoing of keys to the screen, in order to be able
        # to read keys and only display them under certain
        # circumstances. This requires calling the noecho()
        # function.
        curses.noecho()
        
        # Applications will also commonly need to react to
        # keys instantly, without requiring the Enter key to
        # be pressed; this is called cbreak mode, as opposed
        # to the usual buffered input mode.
        curses.cbreak()
        
        # Terminals usually return special keys, such as the
        # cursor keys or navigation keys such as Page Up and
        # Home, as a multibyte escape sequence. While you
        # could write your application to expect such
        # sequences and process them accordingly, curses can
        # do it for you, returning a special value such as
        # curses.KEY_LEFT. To get curses to do the job, you'll
        # have to enable keypad mode.
        stdscr.keypad(1)
        
        # XXX what's this do?
        curses.nonl()
        
        # run the app
        main(stdscr)
        
        # Terminating a curses application is much easier than
        # starting one.  You'll need to call
        curses.nocbreak(); stdscr.keypad(0); curses.echo()
        
        # to reverse the curses-friendly terminal settings.
        # Then call the endwin() function to restore the
        # terminal to its original operating mode.
        curses.endwin()
        
    except:
        stdscr.keypad(0)
        curses.endwin()
        traceback.print_exc()
        sys.exit(1)

def splash(win):
    # XXX use curses
    msg = '''
    key bindings:

        h       show this help splash
        g       goto top   
        G       goto bottom   
        up      prev prompt
        down    next prompt
        /       search forward
        n       next search result
        q       quit

    '''
    win.clear()
    win.refresh()
    win.addstr(0,0,msg)

def ask(win,prompt,default=None):
    (maxy, maxx) = win.getmaxyx()
    row = maxy - 1
    if default:
        prompt += "[%s]" % default
    prompt += ": "
    win.addstr(row, 0, ' ' * (maxx-1))
    win.addstr(row, 0, prompt)
    curses.echo()
    response = win.getstr(row, len(prompt) + 2)
    if len(response) == 0:
        response = default
    curses.noecho()
    win.addstr(row, 0, ' ' * (maxx-1))
    return response

def show(txt):
    print txt,
    # control characters in txt may mess us up, so...
    # ...flush input buffer
    curses.flushinp()
    # ...return to default curses mode 
    curses.reset_prog_mode()

def main(stdscr):
    prompt = sys.argv[1]
    fn = sys.argv[2]

    splash(stdscr)

    fh = open(fn, 'rb')

    # index the file
    prompts = []
    while True:
        pos = fh.tell()
        line = fh.readline()
        if not len(line):
            break
        if line.startswith(prompt):
            prompts.append(pos)


    find = ''
    prompt_only = False
    fast_forward = False
    i = 0
    while True:
        i = max(i,0)
        i = min(i,len(prompts)-1)
        pos = prompts[i]
        fh.seek(pos)
        line = fh.readline()
        print line,

        if fast_forward:
            i += 1
            if i >= len(prompts)-1:
                fast_forward = False
            continue

        if len(find):
            i += 1
            if not line.count(find):
                continue

        c = stdscr.getch()
        if c == ord('b'):
            prompt_only = False
            i -= 1
        elif c == ord('/'):
            find = ask(stdscr, 'search for')
            i += 1
        elif c == ord('n'):
            i += 1
        elif c == ord('g'):
            i = 0
        elif c == ord('h'):
            show_res = False
            splash(stdscr)
        elif c == ord('G'):
            prompt_only = True
            fast_forward = True
            i += 1
        elif c == ord('q'):
            return
        elif c == curses.KEY_DOWN:
            prompt_only = True
            i += 1
        elif c == curses.KEY_UP:
            prompt_only = True
            i -= 1
        else:
            find = ''
            prompt_only = False
            i += 1

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print >>sys.stderr, """usage: scriptreview {prompt_string} {typescript_filename}

        Example:

            alice@mars $ script
            Script started, file is typescript
            [ ...do some things... ]
            alice@mars $ exit
            Script done, file is typescript
            alice@mars $ scriptreview alice@mars typescript
            """
        sys.exit(1)

    curses_main()

